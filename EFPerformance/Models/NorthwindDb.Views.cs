//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(EFPerformance.Models.NorthwindDb),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets640009bb167972887110c34151317708b23a4438ed24c12ef1b3f0b92e87f82d))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets640009bb167972887110c34151317708b23a4438ed24c12ef1b3f0b92e87f82d : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "640009bb167972887110c34151317708b23a4438ed24c12ef1b3f0b92e87f82d"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.Categories")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.Products")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.Order_Details")
            {
                return GetView2();
            }

            if (extentName == "CodeFirstDatabase.Orders")
            {
                return GetView3();
            }

            if (extentName == "CodeFirstDatabase.Customers")
            {
                return GetView4();
            }

            if (extentName == "CodeFirstDatabase.CustomerDemographics")
            {
                return GetView5();
            }

            if (extentName == "CodeFirstDatabase.Employees")
            {
                return GetView6();
            }

            if (extentName == "CodeFirstDatabase.Territories")
            {
                return GetView7();
            }

            if (extentName == "CodeFirstDatabase.Region")
            {
                return GetView8();
            }

            if (extentName == "CodeFirstDatabase.Shippers")
            {
                return GetView9();
            }

            if (extentName == "CodeFirstDatabase.Suppliers")
            {
                return GetView10();
            }

            if (extentName == "CodeFirstDatabase.CustomerDemographicsCustomers")
            {
                return GetView11();
            }

            if (extentName == "CodeFirstDatabase.EmployeesTerritories")
            {
                return GetView12();
            }

            if (extentName == "NorthwindDb.Categories")
            {
                return GetView13();
            }

            if (extentName == "NorthwindDb.Products")
            {
                return GetView14();
            }

            if (extentName == "NorthwindDb.Order_Details")
            {
                return GetView15();
            }

            if (extentName == "NorthwindDb.Orders")
            {
                return GetView16();
            }

            if (extentName == "NorthwindDb.Customers")
            {
                return GetView17();
            }

            if (extentName == "NorthwindDb.CustomerDemographics")
            {
                return GetView18();
            }

            if (extentName == "NorthwindDb.Employees")
            {
                return GetView19();
            }

            if (extentName == "NorthwindDb.Territories")
            {
                return GetView20();
            }

            if (extentName == "NorthwindDb.Region")
            {
                return GetView21();
            }

            if (extentName == "NorthwindDb.Shippers")
            {
                return GetView22();
            }

            if (extentName == "NorthwindDb.Suppliers")
            {
                return GetView23();
            }

            if (extentName == "NorthwindDb.CustomerDemographics_Customers")
            {
                return GetView24();
            }

            if (extentName == "NorthwindDb.Employees_Territories")
            {
                return GetView25();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Categories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Categories
        [CodeFirstDatabaseSchema.Categories](T1.Categories_CategoryID, T1.Categories_CategoryName, T1.Categories_Description, T1.Categories_Picture)
    FROM (
        SELECT 
            T.CategoryID AS Categories_CategoryID, 
            T.CategoryName AS Categories_CategoryName, 
            T.Description AS Categories_Description, 
            T.Picture AS Categories_Picture, 
            True AS _from0
        FROM NorthwindDb.Categories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Products.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Products
        [CodeFirstDatabaseSchema.Products](T1.Products_ProductID, T1.Products_ProductName, T1.Products_SupplierID, T1.Products_CategoryID, T1.Products_QuantityPerUnit, T1.Products_UnitPrice, T1.Products_UnitsInStock, T1.Products_UnitsOnOrder, T1.Products_ReorderLevel, T1.Products_Discontinued)
    FROM (
        SELECT 
            T.ProductID AS Products_ProductID, 
            T.ProductName AS Products_ProductName, 
            T.SupplierID AS Products_SupplierID, 
            T.CategoryID AS Products_CategoryID, 
            T.QuantityPerUnit AS Products_QuantityPerUnit, 
            T.UnitPrice AS Products_UnitPrice, 
            T.UnitsInStock AS Products_UnitsInStock, 
            T.UnitsOnOrder AS Products_UnitsOnOrder, 
            T.ReorderLevel AS Products_ReorderLevel, 
            T.Discontinued AS Products_Discontinued, 
            True AS _from0
        FROM NorthwindDb.Products AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Order_Details.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Order_Details
        [CodeFirstDatabaseSchema.Order_Details](T1.[Order_Details.OrderID], T1.[Order_Details.ProductID], T1.[Order_Details.UnitPrice], T1.[Order_Details.Quantity], T1.[Order_Details.Discount])
    FROM (
        SELECT 
            T.OrderID AS [Order_Details.OrderID], 
            T.ProductID AS [Order_Details.ProductID], 
            T.UnitPrice AS [Order_Details.UnitPrice], 
            T.Quantity AS [Order_Details.Quantity], 
            T.Discount AS [Order_Details.Discount], 
            True AS _from0
        FROM NorthwindDb.Order_Details AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Orders.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Orders
        [CodeFirstDatabaseSchema.Orders](T1.Orders_OrderID, T1.Orders_CustomerID, T1.Orders_EmployeeID, T1.Orders_OrderDate, T1.Orders_RequiredDate, T1.Orders_ShippedDate, T1.Orders_ShipVia, T1.Orders_Freight, T1.Orders_ShipName, T1.Orders_ShipAddress, T1.Orders_ShipCity, T1.Orders_ShipRegion, T1.Orders_ShipPostalCode, T1.Orders_ShipCountry)
    FROM (
        SELECT 
            T.OrderID AS Orders_OrderID, 
            T.CustomerID AS Orders_CustomerID, 
            T.EmployeeID AS Orders_EmployeeID, 
            T.OrderDate AS Orders_OrderDate, 
            T.RequiredDate AS Orders_RequiredDate, 
            T.ShippedDate AS Orders_ShippedDate, 
            T.ShipVia AS Orders_ShipVia, 
            T.Freight AS Orders_Freight, 
            T.ShipName AS Orders_ShipName, 
            T.ShipAddress AS Orders_ShipAddress, 
            T.ShipCity AS Orders_ShipCity, 
            T.ShipRegion AS Orders_ShipRegion, 
            T.ShipPostalCode AS Orders_ShipPostalCode, 
            T.ShipCountry AS Orders_ShipCountry, 
            True AS _from0
        FROM NorthwindDb.Orders AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Customers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Customers
        [CodeFirstDatabaseSchema.Customers](T1.Customers_CustomerID, T1.Customers_CompanyName, T1.Customers_ContactName, T1.Customers_ContactTitle, T1.Customers_Address, T1.Customers_City, T1.Customers_Region, T1.Customers_PostalCode, T1.Customers_Country, T1.Customers_Phone, T1.Customers_Fax, T1.Customers_PreferedCommunication)
    FROM (
        SELECT 
            T.CustomerID AS Customers_CustomerID, 
            T.CompanyName AS Customers_CompanyName, 
            T.ContactName AS Customers_ContactName, 
            T.ContactTitle AS Customers_ContactTitle, 
            T.Address AS Customers_Address, 
            T.City AS Customers_City, 
            T.Region AS Customers_Region, 
            T.PostalCode AS Customers_PostalCode, 
            T.Country AS Customers_Country, 
            T.Phone AS Customers_Phone, 
            T.Fax AS Customers_Fax, 
            T.PreferedCommunication AS Customers_PreferedCommunication, 
            True AS _from0
        FROM NorthwindDb.Customers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.CustomerDemographics.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CustomerDemographics
        [CodeFirstDatabaseSchema.CustomerDemographics](T1.CustomerDemographics_CustomerTypeID, T1.CustomerDemographics_CustomerDesc)
    FROM (
        SELECT 
            T.CustomerTypeID AS CustomerDemographics_CustomerTypeID, 
            T.CustomerDesc AS CustomerDemographics_CustomerDesc, 
            True AS _from0
        FROM NorthwindDb.CustomerDemographics AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Employees.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Employees
        [CodeFirstDatabaseSchema.Employees](T1.Employees_EmployeeID, T1.Employees_LastName, T1.Employees_FirstName, T1.Employees_Title, T1.Employees_TitleOfCourtesy, T1.Employees_BirthDate, T1.Employees_HireDate, T1.Employees_Address, T1.Employees_City, T1.Employees_Region, T1.Employees_PostalCode, T1.Employees_Country, T1.Employees_HomePhone, T1.Employees_Extension, T1.Employees_Photo, T1.Employees_Notes, T1.Employees_ReportsTo, T1.Employees_PhotoPath)
    FROM (
        SELECT 
            T.EmployeeID AS Employees_EmployeeID, 
            T.LastName AS Employees_LastName, 
            T.FirstName AS Employees_FirstName, 
            T.Title AS Employees_Title, 
            T.TitleOfCourtesy AS Employees_TitleOfCourtesy, 
            T.BirthDate AS Employees_BirthDate, 
            T.HireDate AS Employees_HireDate, 
            T.Address AS Employees_Address, 
            T.City AS Employees_City, 
            T.Region AS Employees_Region, 
            T.PostalCode AS Employees_PostalCode, 
            T.Country AS Employees_Country, 
            T.HomePhone AS Employees_HomePhone, 
            T.Extension AS Employees_Extension, 
            T.Photo AS Employees_Photo, 
            T.Notes AS Employees_Notes, 
            T.ReportsTo AS Employees_ReportsTo, 
            T.PhotoPath AS Employees_PhotoPath, 
            True AS _from0
        FROM NorthwindDb.Employees AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Territories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Territories
        [CodeFirstDatabaseSchema.Territories](T1.Territories_TerritoryID, T1.Territories_TerritoryDescription, T1.Territories_RegionID)
    FROM (
        SELECT 
            T.TerritoryID AS Territories_TerritoryID, 
            T.TerritoryDescription AS Territories_TerritoryDescription, 
            T.RegionID AS Territories_RegionID, 
            True AS _from0
        FROM NorthwindDb.Territories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Region.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Region
        [CodeFirstDatabaseSchema.Region](T1.Region_RegionID, T1.Region_RegionDescription)
    FROM (
        SELECT 
            T.RegionID AS Region_RegionID, 
            T.RegionDescription AS Region_RegionDescription, 
            True AS _from0
        FROM NorthwindDb.Region AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Shippers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Shippers
        [CodeFirstDatabaseSchema.Shippers](T1.Shippers_ShipperID, T1.Shippers_CompanyName, T1.Shippers_Phone)
    FROM (
        SELECT 
            T.ShipperID AS Shippers_ShipperID, 
            T.CompanyName AS Shippers_CompanyName, 
            T.Phone AS Shippers_Phone, 
            True AS _from0
        FROM NorthwindDb.Shippers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Suppliers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Suppliers
        [CodeFirstDatabaseSchema.Suppliers](T1.Suppliers_SupplierID, T1.Suppliers_CompanyName, T1.Suppliers_ContactName, T1.Suppliers_ContactTitle, T1.Suppliers_Address, T1.Suppliers_City, T1.Suppliers_Region, T1.Suppliers_PostalCode, T1.Suppliers_Country, T1.Suppliers_Phone, T1.Suppliers_Fax, T1.Suppliers_HomePage)
    FROM (
        SELECT 
            T.SupplierID AS Suppliers_SupplierID, 
            T.CompanyName AS Suppliers_CompanyName, 
            T.ContactName AS Suppliers_ContactName, 
            T.ContactTitle AS Suppliers_ContactTitle, 
            T.Address AS Suppliers_Address, 
            T.City AS Suppliers_City, 
            T.Region AS Suppliers_Region, 
            T.PostalCode AS Suppliers_PostalCode, 
            T.Country AS Suppliers_Country, 
            T.Phone AS Suppliers_Phone, 
            T.Fax AS Suppliers_Fax, 
            T.HomePage AS Suppliers_HomePage, 
            True AS _from0
        FROM NorthwindDb.Suppliers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.CustomerDemographicsCustomers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CustomerDemographicsCustomers
        [CodeFirstDatabaseSchema.CustomerDemographicsCustomers](T1.CustomerDemographicsCustomers_CustomerTypeID, T1.CustomerDemographicsCustomers_CustomerID)
    FROM (
        SELECT 
            Key(T.CustomerDemographics_Customers_Source).CustomerTypeID AS CustomerDemographicsCustomers_CustomerTypeID, 
            Key(T.CustomerDemographics_Customers_Target).CustomerID AS CustomerDemographicsCustomers_CustomerID, 
            True AS _from0
        FROM NorthwindDb.CustomerDemographics_Customers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.EmployeesTerritories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing EmployeesTerritories
        [CodeFirstDatabaseSchema.EmployeesTerritories](T1.EmployeesTerritories_EmployeeID, T1.EmployeesTerritories_TerritoryID)
    FROM (
        SELECT 
            Key(T.Employees_Territories_Source).EmployeeID AS EmployeesTerritories_EmployeeID, 
            Key(T.Employees_Territories_Target).TerritoryID AS EmployeesTerritories_TerritoryID, 
            True AS _from0
        FROM NorthwindDb.Employees_Territories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NorthwindDb.Categories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Categories
        [EFPerformance.Models.Categories](T1.Categories_CategoryID, T1.Categories_CategoryName, T1.Categories_Description, T1.Categories_Picture)
    FROM (
        SELECT 
            T.CategoryID AS Categories_CategoryID, 
            T.CategoryName AS Categories_CategoryName, 
            T.Description AS Categories_Description, 
            T.Picture AS Categories_Picture, 
            True AS _from0
        FROM CodeFirstDatabase.Categories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NorthwindDb.Products.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Products
        [EFPerformance.Models.Products](T1.Products_ProductID, T1.Products_ProductName, T1.Products_SupplierID, T1.Products_CategoryID, T1.Products_QuantityPerUnit, T1.Products_UnitPrice, T1.Products_UnitsInStock, T1.Products_UnitsOnOrder, T1.Products_ReorderLevel, T1.Products_Discontinued)
    FROM (
        SELECT 
            T.ProductID AS Products_ProductID, 
            T.ProductName AS Products_ProductName, 
            T.SupplierID AS Products_SupplierID, 
            T.CategoryID AS Products_CategoryID, 
            T.QuantityPerUnit AS Products_QuantityPerUnit, 
            T.UnitPrice AS Products_UnitPrice, 
            T.UnitsInStock AS Products_UnitsInStock, 
            T.UnitsOnOrder AS Products_UnitsOnOrder, 
            T.ReorderLevel AS Products_ReorderLevel, 
            T.Discontinued AS Products_Discontinued, 
            True AS _from0
        FROM CodeFirstDatabase.Products AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NorthwindDb.Order_Details.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Order_Details
        [EFPerformance.Models.Order_Details](T1.[Order_Details.OrderID], T1.[Order_Details.ProductID], T1.[Order_Details.UnitPrice], T1.[Order_Details.Quantity], T1.[Order_Details.Discount])
    FROM (
        SELECT 
            T.OrderID AS [Order_Details.OrderID], 
            T.ProductID AS [Order_Details.ProductID], 
            T.UnitPrice AS [Order_Details.UnitPrice], 
            T.Quantity AS [Order_Details.Quantity], 
            T.Discount AS [Order_Details.Discount], 
            True AS _from0
        FROM CodeFirstDatabase.Order_Details AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NorthwindDb.Orders.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Orders
        [EFPerformance.Models.Orders](T1.Orders_OrderID, T1.Orders_CustomerID, T1.Orders_EmployeeID, T1.Orders_OrderDate, T1.Orders_RequiredDate, T1.Orders_ShippedDate, T1.Orders_ShipVia, T1.Orders_Freight, T1.Orders_ShipName, T1.Orders_ShipAddress, T1.Orders_ShipCity, T1.Orders_ShipRegion, T1.Orders_ShipPostalCode, T1.Orders_ShipCountry)
    FROM (
        SELECT 
            T.OrderID AS Orders_OrderID, 
            T.CustomerID AS Orders_CustomerID, 
            T.EmployeeID AS Orders_EmployeeID, 
            T.OrderDate AS Orders_OrderDate, 
            T.RequiredDate AS Orders_RequiredDate, 
            T.ShippedDate AS Orders_ShippedDate, 
            T.ShipVia AS Orders_ShipVia, 
            T.Freight AS Orders_Freight, 
            T.ShipName AS Orders_ShipName, 
            T.ShipAddress AS Orders_ShipAddress, 
            T.ShipCity AS Orders_ShipCity, 
            T.ShipRegion AS Orders_ShipRegion, 
            T.ShipPostalCode AS Orders_ShipPostalCode, 
            T.ShipCountry AS Orders_ShipCountry, 
            True AS _from0
        FROM CodeFirstDatabase.Orders AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NorthwindDb.Customers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Customers
        [EFPerformance.Models.Customers](T1.Customers_CustomerID, T1.Customers_CompanyName, T1.Customers_ContactName, T1.Customers_ContactTitle, T1.Customers_Address, T1.Customers_City, T1.Customers_Region, T1.Customers_PostalCode, T1.Customers_Country, T1.Customers_Phone, T1.Customers_Fax, T1.Customers_PreferedCommunication)
    FROM (
        SELECT 
            T.CustomerID AS Customers_CustomerID, 
            T.CompanyName AS Customers_CompanyName, 
            T.ContactName AS Customers_ContactName, 
            T.ContactTitle AS Customers_ContactTitle, 
            T.Address AS Customers_Address, 
            T.City AS Customers_City, 
            T.Region AS Customers_Region, 
            T.PostalCode AS Customers_PostalCode, 
            T.Country AS Customers_Country, 
            T.Phone AS Customers_Phone, 
            T.Fax AS Customers_Fax, 
            T.PreferedCommunication AS Customers_PreferedCommunication, 
            True AS _from0
        FROM CodeFirstDatabase.Customers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NorthwindDb.CustomerDemographics.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CustomerDemographics
        [EFPerformance.Models.CustomerDemographics](T1.CustomerDemographics_CustomerTypeID, T1.CustomerDemographics_CustomerDesc)
    FROM (
        SELECT 
            T.CustomerTypeID AS CustomerDemographics_CustomerTypeID, 
            T.CustomerDesc AS CustomerDemographics_CustomerDesc, 
            True AS _from0
        FROM CodeFirstDatabase.CustomerDemographics AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NorthwindDb.Employees.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Employees
        [EFPerformance.Models.Employees](T1.Employees_EmployeeID, T1.Employees_LastName, T1.Employees_FirstName, T1.Employees_Title, T1.Employees_TitleOfCourtesy, T1.Employees_BirthDate, T1.Employees_HireDate, T1.Employees_Address, T1.Employees_City, T1.Employees_Region, T1.Employees_PostalCode, T1.Employees_Country, T1.Employees_HomePhone, T1.Employees_Extension, T1.Employees_Photo, T1.Employees_Notes, T1.Employees_ReportsTo, T1.Employees_PhotoPath)
    FROM (
        SELECT 
            T.EmployeeID AS Employees_EmployeeID, 
            T.LastName AS Employees_LastName, 
            T.FirstName AS Employees_FirstName, 
            T.Title AS Employees_Title, 
            T.TitleOfCourtesy AS Employees_TitleOfCourtesy, 
            T.BirthDate AS Employees_BirthDate, 
            T.HireDate AS Employees_HireDate, 
            T.Address AS Employees_Address, 
            T.City AS Employees_City, 
            T.Region AS Employees_Region, 
            T.PostalCode AS Employees_PostalCode, 
            T.Country AS Employees_Country, 
            T.HomePhone AS Employees_HomePhone, 
            T.Extension AS Employees_Extension, 
            T.Photo AS Employees_Photo, 
            T.Notes AS Employees_Notes, 
            T.ReportsTo AS Employees_ReportsTo, 
            T.PhotoPath AS Employees_PhotoPath, 
            True AS _from0
        FROM CodeFirstDatabase.Employees AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NorthwindDb.Territories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Territories
        [EFPerformance.Models.Territories](T1.Territories_TerritoryID, T1.Territories_TerritoryDescription, T1.Territories_RegionID)
    FROM (
        SELECT 
            T.TerritoryID AS Territories_TerritoryID, 
            T.TerritoryDescription AS Territories_TerritoryDescription, 
            T.RegionID AS Territories_RegionID, 
            True AS _from0
        FROM CodeFirstDatabase.Territories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NorthwindDb.Region.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Region
        [EFPerformance.Models.Region](T1.Region_RegionID, T1.Region_RegionDescription)
    FROM (
        SELECT 
            T.RegionID AS Region_RegionID, 
            T.RegionDescription AS Region_RegionDescription, 
            True AS _from0
        FROM CodeFirstDatabase.Region AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NorthwindDb.Shippers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView22()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Shippers
        [EFPerformance.Models.Shippers](T1.Shippers_ShipperID, T1.Shippers_CompanyName, T1.Shippers_Phone)
    FROM (
        SELECT 
            T.ShipperID AS Shippers_ShipperID, 
            T.CompanyName AS Shippers_CompanyName, 
            T.Phone AS Shippers_Phone, 
            True AS _from0
        FROM CodeFirstDatabase.Shippers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NorthwindDb.Suppliers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView23()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Suppliers
        [EFPerformance.Models.Suppliers](T1.Suppliers_SupplierID, T1.Suppliers_CompanyName, T1.Suppliers_ContactName, T1.Suppliers_ContactTitle, T1.Suppliers_Address, T1.Suppliers_City, T1.Suppliers_Region, T1.Suppliers_PostalCode, T1.Suppliers_Country, T1.Suppliers_Phone, T1.Suppliers_Fax, T1.Suppliers_HomePage)
    FROM (
        SELECT 
            T.SupplierID AS Suppliers_SupplierID, 
            T.CompanyName AS Suppliers_CompanyName, 
            T.ContactName AS Suppliers_ContactName, 
            T.ContactTitle AS Suppliers_ContactTitle, 
            T.Address AS Suppliers_Address, 
            T.City AS Suppliers_City, 
            T.Region AS Suppliers_Region, 
            T.PostalCode AS Suppliers_PostalCode, 
            T.Country AS Suppliers_Country, 
            T.Phone AS Suppliers_Phone, 
            T.Fax AS Suppliers_Fax, 
            T.HomePage AS Suppliers_HomePage, 
            True AS _from0
        FROM CodeFirstDatabase.Suppliers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NorthwindDb.CustomerDemographics_Customers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView24()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CustomerDemographics_Customers
        [EFPerformance.Models.CustomerDemographics_Customers](T3.[CustomerDemographics_Customers.CustomerDemographics_Customers_Source], T3.[CustomerDemographics_Customers.CustomerDemographics_Customers_Target])
    FROM (
        SELECT -- Constructing CustomerDemographics_Customers_Source
            CreateRef(NorthwindDb.CustomerDemographics, row(T2.[CustomerDemographics_Customers.CustomerDemographics_Customers_Source.CustomerTypeID]), [EFPerformance.Models.CustomerDemographics]) AS [CustomerDemographics_Customers.CustomerDemographics_Customers_Source], 
            T2.[CustomerDemographics_Customers.CustomerDemographics_Customers_Target]
        FROM (
            SELECT -- Constructing CustomerDemographics_Customers_Target
                T1.[CustomerDemographics_Customers.CustomerDemographics_Customers_Source.CustomerTypeID], 
                CreateRef(NorthwindDb.Customers, row(T1.[CustomerDemographics_Customers.CustomerDemographics_Customers_Target.CustomerID]), [EFPerformance.Models.Customers]) AS [CustomerDemographics_Customers.CustomerDemographics_Customers_Target]
            FROM (
                SELECT 
                    T.CustomerTypeID AS [CustomerDemographics_Customers.CustomerDemographics_Customers_Source.CustomerTypeID], 
                    T.CustomerID AS [CustomerDemographics_Customers.CustomerDemographics_Customers_Target.CustomerID], 
                    True AS _from0
                FROM CodeFirstDatabase.CustomerDemographicsCustomers AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for NorthwindDb.Employees_Territories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView25()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Employees_Territories
        [EFPerformance.Models.Employees_Territories](T3.[Employees_Territories.Employees_Territories_Source], T3.[Employees_Territories.Employees_Territories_Target])
    FROM (
        SELECT -- Constructing Employees_Territories_Source
            CreateRef(NorthwindDb.Employees, row(T2.[Employees_Territories.Employees_Territories_Source.EmployeeID]), [EFPerformance.Models.Employees]) AS [Employees_Territories.Employees_Territories_Source], 
            T2.[Employees_Territories.Employees_Territories_Target]
        FROM (
            SELECT -- Constructing Employees_Territories_Target
                T1.[Employees_Territories.Employees_Territories_Source.EmployeeID], 
                CreateRef(NorthwindDb.Territories, row(T1.[Employees_Territories.Employees_Territories_Target.TerritoryID]), [EFPerformance.Models.Territories]) AS [Employees_Territories.Employees_Territories_Target]
            FROM (
                SELECT 
                    T.EmployeeID AS [Employees_Territories.Employees_Territories_Source.EmployeeID], 
                    T.TerritoryID AS [Employees_Territories.Employees_Territories_Target.TerritoryID], 
                    True AS _from0
                FROM CodeFirstDatabase.EmployeesTerritories AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
    }
}
